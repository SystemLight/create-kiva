{
  // 配置参考：https://www.typescriptlang.org/zh/tsconfig

  // 包含目录或者文件，支持glob匹配
  "include": [
    "src/**/*"
  ],

  // 排除目录或者文件，支持glob匹配
  "exclude": [
    "node_modules/**/*",
    "**/*.spec.ts",
    "src/assets/**/*"
  ],

  // 编译器选项
  "compilerOptions": {

    // 启用增量编译
    // "incremental": true,

    // 指定ecmascript目标版本：“es3”（默认），“es5”，“es2015”，“es2016”，“es2017”，“es2018”，“es2019”或“esnext”
    "target": "esNext",

    // 指定模块代码生成：“none”、“commonjs”、“amd”、“system”、“umd”、“es2015”或“ESNext”
    "module": "esNext",

    // 指定额外包含在编译中的库文件
    // "lib": [],

    // 允许编译javascript文件
    "allowJs": false,

    // 报告.js文件中的错误
    // "checkJs": true,

    // 如何处理JSX语法，包含：react | react-jsx | react-jsxdev | preserve | react-native
    "jsx": "preserve",

    // 生成类型生成文件
    "declaration": false,

    // 为每个对应的“.d.ts”文件生成源映射
    // "declarationMap": true,

    // 生成相应的“.map”文件
    "sourceMap": true,

    // 制定输出文件
    // "outFile": "./",

    // 将输出结构重定向到目录
    // "outDir": "./",

    // 指定输入文件的根目录
    // "rootDir": "./",

    // 启用项目编译
    // "composite": true,

    // 指定增量编译存储的文件
    // "tsBuildInfoFile": "./",

    // 删除注释
    "removeComments": false,

    // 不输出文件，配合ts-loader
    "noEmit": false,

    // 从“tslib”导入emit帮助程序
    // "importHelpers": true,

    // 针对“ES5”或“ES3”时，在“for of”、“spread”和“destructuring”中为iterables提供全面支持
    // "downlevelIteration": true,

    // 将每个文件作为单独的模块进行传输，文件必须声明导出
    "isolatedModules": false,

    // 严格模式
    "strict": true,

    // 在严格模式下解析，并为每个源文件发出“use strict”
    // "alwaysStrict": true,

    // 对隐含“any”类型的表达式和声明引发错误
    "noImplicitAny": false,

    // 阻止 noImplicitAny 对缺少索引签名的索引对象报错
    "suppressImplicitAnyIndexErrors": true,

    // 对隐含“any”类型的“this”表达式引发错误
    // "noImplicitThis": true,

    // 启用严格的空检查
    // "strictNullChecks": true,

    // 启用对函数类型的严格检查
    // "strictFunctionTypes": true,

    // 对函数启用严格的“bind”、“call”和“apply”方法
    // "strictBindCallApply": true,

    // 启用类中属性初始化的严格检查
    // "strictPropertyInitialization": true,

    // 报告未使用的局部变量的错误
    // "noUnusedLocals": true,

    // 报告未使用参数的错误
    // "noUnusedParameters": true,

    // 函数中并非所有代码路径都返回值时报告错误
    // "noImplicitReturns": true,

    // 在switch语句中未正确返回报告错误
    // "noFallthroughCasesInSwitch": true,

    // 指定模块解析策略：“node”(节点.js)或“classic”（TypeScript pre-1.6）
    "moduleResolution": "node",

    // 解析模块基目录
    "baseUrl": "./",

    // 定义导入别名，这个配置需要和webpack别名一致
    "paths": {
      "@/*": [
        "src/*"
      ],
      "@@/*": [
        "src/pages/*"
      ]
    },

    // 其组合内容在运行时表示项目结构的根文件夹列表
    // "rootDirs": [],

    // 包含类型定义的文件夹列表
    // "typeRoots": [],

    // 编译中要包含的类型声明文件
    // "types": [],

    // 允许从没有默认导出的模块进行默认导入
    "allowSyntheticDefaultImports": true,

    // 通过为所有导入创建命名空间对象，实现CommonJS和ES模块之间的互操作性，需要启用allowSyntheticDefaultImports
    "esModuleInterop": true,

    // 不要解析符号链接的实际路径
    // "preserveSymlinks": true,

    // 允许从模块访问UMD全局
    // "allowUmdGlobalAccess": true,

    // 指定调试器应该定位TypeScript文件的位置，而不是源位置
    // "sourceRoot": "",

    // 指定调试器应该定位映射文件的位置，而不是生成的位置
    // "mapRoot": "",

    // 输出代码映射文件
    // "inlineSourceMap": true,

    // 输出源码文件
    // "inlineSources": true,

    // 启用装饰器支持
    // "experimentalDecorators": true,

    // 启用对装饰器元信息支持
    // "emitDecoratorMetadata": true,

    // 不允许对同一文件的大小写不一致的引用
    "forceConsistentCasingInFileNames": true,

    // 解析JSON文件
    "resolveJsonModule": false,

    // 忽略所有的声明文件（ *.d.ts）的类型检查
    "skipLibCheck": true,

    // 忽略库的默认声明文件的类型检查
    "skipDefaultLibCheck": true
  }
}
